import { useEffect, useMemo, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { loadPricing } from "@/store/pricingSlice";
// 1. IMPORT C√ÅC ACTION T·ª™ ORDER SLICE
import { createOrder, clearOrderError } from "@/store/orderSlice";
import { fmtVND as fmt, calcTotal } from "@/utils/countToToal";
import { SingleCard, ComboCard, PaymentCard } from "@/components/dashboard/purchagemangement";
import { useNavigate } from "react-router-dom";

export default function PurchagePostPage() {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    // L·∫•y state t·ª´ slice qu·∫£n l√Ω gi√° s·∫£n ph·∫©m
    const { SINGLE, COMBOS, ALL_ITEMS, loading: pricingLoading, error: pricingError } = useSelector((s) => s.pricing);

    // 2. L·∫§Y STATE T·ª™ SLICE QU·∫¢N L√ù ORDER
    const { loading: isCreatingOrder, error: orderError } = useSelector((s) => s.orders);

    const [qty, setQty] = useState({});
    const setItem = (id, v) => setQty((s) => ({ ...s, [id]: v }));

    // T·∫£i danh s√°ch gi√° khi component ƒë∆∞·ª£c mount
    useEffect(() => {
        dispatch(loadPricing());
    }, [dispatch]);

    const total = useMemo(() => calcTotal(qty, SINGLE, COMBOS), [qty, SINGLE, COMBOS]);

    // 3. H√ÄM X·ª¨ L√ù KHI NH·∫§N N√öT "THANH TO√ÅN"
    const handlePayment = async () => {
        // X√≥a l·ªói c≈© (n·∫øu c√≥) tr∆∞·ªõc khi th·ª±c hi·ªán l·∫ßn m·ªõi
        if (orderError) {
            dispatch(clearOrderError());
        }

        // Chuy·ªÉn ƒë·ªïi state `qty` sang ƒë·ªãnh d·∫°ng payload m√† backend y√™u c·∫ßu
        // State `qty`: { "vip-1": 2, "combo-1": 1 }
        // Payload c·∫ßn: [ { code: "VIP_01", qty: 2 }, { code: "COMBO_EXP", qty: 1 } ]
        // Trong h√†m handlePayment c·ªßa file PurchagePostPage.jsx

        const itemsPayload = Object.keys(qty)
            .filter(itemId => qty[itemId] > 0)
            .map(itemId => {
                const itemInfo = ALL_ITEMS.find(item => item.id.toString() === itemId);

                if (!itemInfo) return null;

                // S·ª¨A L·∫†I ·ªû ƒê√ÇY: L·∫•y `code` t·ª´ b√™n trong `_raw`
                // D√πng `itemInfo._raw?.code` ƒë·ªÉ an to√†n, n·∫øu `_raw` kh√¥ng t·ªìn t·∫°i c≈©ng kh√¥ng b·ªã l·ªói
                // D√πng `|| itemInfo.id` l√†m ph∆∞∆°ng √°n d·ª± ph√≤ng, n·∫øu kh√¥ng c√≥ code th√¨ d√πng id
                const codeToSend = itemInfo._raw?.code || itemInfo.id;

                return {
                    code: codeToSend,
                    qty: qty[itemId]
                };
            })
            .filter(Boolean); // L·ªçc ra c√°c gi√° tr·ªã null

        // B∆Ø·ªöC DEBUG QUAN TR·ªåNG NH·∫§T
        console.log("State gi·ªè h√†ng (qty):", qty);
        console.log("Danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m (ALL_ITEMS):", ALL_ITEMS);
        console.log("Payload s·∫Ω g·ª≠i ƒëi (itemsPayload):", itemsPayload);

        if (itemsPayload.length === 0) {
            alert("Gi·ªè h√†ng r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá, kh√¥ng th·ªÉ g·ª≠i ƒëi.");
            return;
        }

        // Dispatch action `createOrder` ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh
        const resultAction = await dispatch(createOrder(itemsPayload));
        if (createOrder.fulfilled.match(resultAction)) {
            const newOrder = resultAction.payload; // { orderId, ... }
            setQty({}); // reset gi·ªè h√†ng
            // üëâ ƒêi·ªÅu h∆∞·ªõng sang trang thanh to√°n th·∫ª (mock)
            navigate(`/dashboard/pay?orderId=${encodeURIComponent(newOrder.orderId)}&amount=${encodeURIComponent(total)}`);
        }
    };

    if (pricingLoading) return <div className="p-6">ƒêang t·∫£i b·∫£ng gi√°‚Ä¶</div>;

    return (
        <div className="grid grid-cols-12 gap-6">
            <div className="col-span-8">
                <div className="bg-white rounded-2xl border border-[#e8edf6] shadow-[0_10px_30px_rgba(13,47,97,0.06)] p-6">
                    <h2 className="font-semibold text-[#1a3b7c] text-[16px] mb-4">Mua tin l·∫ª</h2>
                    <div className="grid grid-cols-3 gap-4 mb-8">
                        {SINGLE.map((it) => (
                            <SingleCard key={it.id} item={it} value={qty[it.id] || 0} onChange={(v) => setItem(it.id, v)} />
                        ))}
                    </div>

                    <h2 className="font-semibold text-[#1a3b7c] text-[16px] mb-4">Mua theo Combo</h2>
                    <div className="grid grid-cols-3 gap-4">
                        {COMBOS.map((it) => (
                            <ComboCard key={it.id} item={it} value={qty[it.id] || 0} onChange={(v) => setItem(it.id, v)} />
                        ))}
                    </div>
                </div>
            </div>

            <div className="col-span-4">
                {/* 4. TRUY·ªÄN H√ÄM M·ªöI V√Ä TR·∫†NG TH√ÅI LOADING V√ÄO COMPONENT THANH TO√ÅN */}
                <PaymentCard
                    qty={qty}
                    allItems={ALL_ITEMS}
                    total={total}
                    fmt={fmt}
                    onPay={handlePayment}
                    // V√¥ hi·ªáu h√≥a n√∫t thanh to√°n khi ƒëang g·ªçi API
                    disabled={isCreatingOrder}
                />

                {/* Hi·ªÉn th·ªã c√°c th√¥ng b√°o tr·∫°ng th√°i cho ng∆∞·ªùi d√πng */}
                {pricingError && <div className="mt-3 text-xs text-amber-600">{pricingError}</div>}
                {isCreatingOrder && <div className="mt-3 text-center text-blue-600 font-semibold">ƒêang x·ª≠ l√Ω ƒë∆°n h√†ng...</div>}
                {orderError && <div className="mt-3 text-xs text-red-600">L·ªói: {orderError}</div>}
            </div>
        </div>
    );
}